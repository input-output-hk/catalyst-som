CREATE TABLE IF NOT EXISTS public.challenges_users
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    challenge_id bigint,
    user_id uuid,
    user_idd bigint,
    CONSTRAINT challenges_users_pkey PRIMARY KEY (id),
    CONSTRAINT challenges_users_challenge_id_fkey FOREIGN KEY (challenge_id)
        REFERENCES public.challenges (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT challenges_users_user_id_fkey FOREIGN KEY (user_id)
        REFERENCES auth.users (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT challenges_users_user_idd_fkey FOREIGN KEY (user_idd)
        REFERENCES public.users (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.challenges_users
    OWNER to postgres;

ALTER TABLE IF EXISTS public.challenges_users
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public.challenges_users TO authenticated;

GRANT ALL ON TABLE public.challenges_users TO anon;

GRANT ALL ON TABLE public.challenges_users TO service_role;

GRANT ALL ON TABLE public.challenges_users TO postgres;
CREATE POLICY "Create challenges_users"
    ON public.challenges_users
    AS PERMISSIVE
    FOR INSERT
    TO public
    WITH CHECK (is_admin(auth.uid()));
CREATE POLICY "Select public"
    ON public.challenges_users
    AS PERMISSIVE
    FOR SELECT
    TO public
    USING (true);
CREATE POLICY "delete admin"
    ON public.challenges_users
    AS PERMISSIVE
    FOR DELETE
    TO public
    USING ((EXISTS ( SELECT users.user_id,
    users.role
   FROM users
  WHERE ((users.user_id = auth.uid()) AND (users.role = 3)))));