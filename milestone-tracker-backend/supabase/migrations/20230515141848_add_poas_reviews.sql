CREATE TABLE IF NOT EXISTS public.poas_reviews
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    content_approved boolean,
    content_comment text COLLATE pg_catalog."default",
    poas_id bigint,
    role bigint,
    created_at timestamp with time zone DEFAULT now(),
    user_id uuid DEFAULT auth.uid(),
    current boolean DEFAULT false,
    CONSTRAINT poas_review_pkey PRIMARY KEY (id),
    CONSTRAINT poas_reviews_poas_id_fkey FOREIGN KEY (poas_id)
        REFERENCES public.poas (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT poas_reviews_user_id_fkey FOREIGN KEY (user_id)
        REFERENCES public.users (_auth_user_id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.poas_reviews
    OWNER to postgres;

ALTER TABLE IF EXISTS public.poas_reviews
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public.poas_reviews TO anon;

GRANT ALL ON TABLE public.poas_reviews TO authenticated;

GRANT ALL ON TABLE public.poas_reviews TO postgres;

GRANT ALL ON TABLE public.poas_reviews TO service_role;

CREATE OR REPLACE FUNCTION public.set_old_poa_reviews_not_current()
    RETURNS trigger
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE NOT LEAKPROOF
AS $BODY$
begin
  update public.poas_reviews
  set current=false
  where poas_id = new.poas_id
  and user_id = new.user_id
  and current
  and id != new.id;
  return new;
end;
$BODY$;

ALTER FUNCTION public.set_old_poa_reviews_not_current()
    OWNER TO postgres;

GRANT EXECUTE ON FUNCTION public.set_old_poa_reviews_not_current() TO authenticated;

GRANT EXECUTE ON FUNCTION public.set_old_poa_reviews_not_current() TO postgres;

GRANT EXECUTE ON FUNCTION public.set_old_poa_reviews_not_current() TO PUBLIC;

GRANT EXECUTE ON FUNCTION public.set_old_poa_reviews_not_current() TO anon;

GRANT EXECUTE ON FUNCTION public.set_old_poa_reviews_not_current() TO service_role;

CREATE TRIGGER on_poa_reviews_created
    BEFORE INSERT
    ON public.poas_reviews
    FOR EACH ROW
    EXECUTE FUNCTION public.set_old_poa_reviews_not_current();


CREATE POLICY "Insert PoAs reviews"
    ON public.poas_reviews
    AS PERMISSIVE
    FOR INSERT
    TO public
    WITH CHECK ((is_in_challenge_ct(( SELECT array_agg(poas.challenge_id) AS array_agg
   FROM poas
  WHERE (poas.id = poas_reviews.poas_id))) OR is_proposal_allocated(( SELECT poas.proposal_id
   FROM poas
  WHERE (poas.id = poas_reviews.poas_id))) OR is_io_member(auth.uid()) OR is_admin(auth.uid())));

CREATE POLICY "Update PoAs reviews"
    ON public.poas_reviews
    AS PERMISSIVE
    FOR UPDATE
    TO public
    USING ((is_in_challenge_ct(( SELECT array_agg(poas.challenge_id) AS array_agg
   FROM poas
  WHERE (poas.id = poas_reviews.poas_id))) OR is_proposal_allocated(( SELECT poas.proposal_id
   FROM poas
  WHERE (poas.id = poas_reviews.poas_id))) OR is_io_member(auth.uid()) OR is_admin(auth.uid())))
    WITH CHECK ((is_in_challenge_ct(( SELECT array_agg(poas.challenge_id) AS array_agg
   FROM poas
  WHERE (poas.id = poas_reviews.poas_id))) OR is_proposal_allocated(( SELECT poas.proposal_id
   FROM poas
  WHERE (poas.id = poas_reviews.poas_id))) OR is_io_member(auth.uid()) OR is_admin(auth.uid())));

CREATE POLICY "Public list"
    ON public.poas_reviews
    AS PERMISSIVE
    FOR SELECT
    TO public
    USING (true);

CREATE TRIGGER on_poa_review_created
    BEFORE INSERT
    ON public.poas_reviews
    FOR EACH ROW
    EXECUTE FUNCTION public.set_row_role();