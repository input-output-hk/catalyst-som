create table "public"."threads" (
    "id" bigint generated by default as identity not null,
    "user_id" uuid default auth.uid(),
    "proposal_id" bigint,
    "text" text,
    "created_at" timestamp with time zone not null default now()
);


alter table "public"."threads" enable row level security;

CREATE UNIQUE INDEX threads_pkey ON public.threads USING btree (id);

alter table "public"."threads" add constraint "threads_pkey" PRIMARY KEY using index "threads_pkey";

alter table "public"."threads" add constraint "threads_proposal_id_fkey" FOREIGN KEY (proposal_id) REFERENCES proposals(id) ON UPDATE CASCADE ON DELETE SET NULL not valid;

alter table "public"."threads" validate constraint "threads_proposal_id_fkey";

alter table "public"."threads" add constraint "threads_user_id_fkey" FOREIGN KEY (user_id) REFERENCES users(_auth_user_id) ON UPDATE CASCADE ON DELETE SET NULL not valid;

alter table "public"."threads" validate constraint "threads_user_id_fkey";

grant delete on table "public"."threads" to "anon";

grant insert on table "public"."threads" to "anon";

grant references on table "public"."threads" to "anon";

grant select on table "public"."threads" to "anon";

grant trigger on table "public"."threads" to "anon";

grant truncate on table "public"."threads" to "anon";

grant update on table "public"."threads" to "anon";

grant delete on table "public"."threads" to "authenticated";

grant insert on table "public"."threads" to "authenticated";

grant references on table "public"."threads" to "authenticated";

grant select on table "public"."threads" to "authenticated";

grant trigger on table "public"."threads" to "authenticated";

grant truncate on table "public"."threads" to "authenticated";

grant update on table "public"."threads" to "authenticated";

grant delete on table "public"."threads" to "service_role";

grant insert on table "public"."threads" to "service_role";

grant references on table "public"."threads" to "service_role";

grant select on table "public"."threads" to "service_role";

grant trigger on table "public"."threads" to "service_role";

grant truncate on table "public"."threads" to "service_role";

grant update on table "public"."threads" to "service_role";

create policy "public insert"
on "public"."threads"
as permissive
for insert
to public
with check ((is_proposal_owner(proposal_id) OR is_admin(auth.uid()) OR is_proposal_allocated_for_signoff(proposal_id) OR is_proposal_allocated(proposal_id) OR is_io_member(auth.uid())));


create policy "public"
on "public"."threads"
as permissive
for select
to public
using (true);



