CREATE TABLE IF NOT EXISTS public.proposals_users
(
    id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
    proposal_id bigint,
    user_id uuid,
    user_idd bigint,
    CONSTRAINT proposals_users_pkey PRIMARY KEY (id),
    CONSTRAINT proposals_users_proposal_id_fkey FOREIGN KEY (proposal_id)
        REFERENCES public.proposals (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT proposals_users_user_id_fkey FOREIGN KEY (user_id)
        REFERENCES auth.users (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT proposals_users_user_idd_fkey FOREIGN KEY (user_idd)
        REFERENCES public.users (id) MATCH SIMPLE
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
)

TABLESPACE pg_default;

ALTER TABLE IF EXISTS public.proposals_users
    OWNER to postgres;

ALTER TABLE IF EXISTS public.proposals_users
    ENABLE ROW LEVEL SECURITY;

GRANT ALL ON TABLE public.proposals_users TO authenticated;

GRANT ALL ON TABLE public.proposals_users TO anon;

GRANT ALL ON TABLE public.proposals_users TO service_role;

GRANT ALL ON TABLE public.proposals_users TO postgres;
CREATE POLICY "proposals_users delete"
    ON public.proposals_users
    AS PERMISSIVE
    FOR DELETE
    TO public
    USING (is_admin(auth.uid()));
CREATE POLICY "proposals_users insert"
    ON public.proposals_users
    AS PERMISSIVE
    FOR INSERT
    TO public
    WITH CHECK (is_admin(auth.uid()));
CREATE POLICY "proposals_users select"
    ON public.proposals_users
    AS PERMISSIVE
    FOR SELECT
    TO public
    USING (true);